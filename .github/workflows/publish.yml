name: 🚀 Build and Publish

on:
  # Déclenchement manuel depuis l'interface GitHub
  workflow_dispatch:

  # Déclenchement par un push sur la branche main
  push:
    branches:
      - main

jobs:
  # Création du build et publication du package
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      pages: write

    outputs:
      PUBLISHED_NPM: ${{ steps.check_version.outputs.PUBLISHED_NPM }}
      PUBLISHED_GITHUB: ${{ steps.check_version.outputs.PUBLISHED_GITHUB }}
      VERSION_CHANGED: ${{ steps.check_version.outputs.VERSION_CHANGED }}
      VERSION: ${{ steps.check_version.outputs.VERSION }}
      TAG_NAME: ${{ steps.check_version.outputs.TAG_NAME }}

    steps:
      # 1. Installation
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      # 2. Tests et déploiement du rapport de couverture
      - name: 📊 Generate test coverage
        run: npm run test:coverage

      - name: 🛂 Ensure badges directory exists
        run: mkdir -p badges

      - name: 🎨 Create Coverage Badge
        uses: jaywcjlove/coverage-badges-cli@main
        with:
          source: coverage/coverage-summary.json
          output: badges/coverage.svg

      - name: 🏷️ Deploy badge to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: badges
          target-folder: badges
          branch: gh-pages
          clean: false

      - name: 📄 Deploy coverage report to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: coverage/lcov-report
          target-folder: coverage
          branch: gh-pages
          clean: true
          clean-exclude: |
            storybook/**
            badges/**

      # 3. Préparation et déploiement de la page d'accueil
      - name: 📄 Convert README to HTML
        run: |
          mkdir -p deploy_root
          cp README.md deploy_root/

          # Installation et utilisation de marked
          npm install -g marked
          echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>KUI Documentation</title><style>body{max-width:800px;margin:40px auto;padding:0 20px;font-family:system-ui,-apple-system,sans-serif}</style></head><body>" > deploy_root/index.html
          marked -i README.md >> deploy_root/index.html
          echo "</body></html>" >> deploy_root/index.html

      - name: 📤 Deploy README to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: deploy_root
          target-folder: .
          clean: false

      # 4. Vérification du statut de la version sur NPM et GitHub
      - name: 🔍 Check versions status
        id: check_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_NAME="v$PACKAGE_VERSION"

          # Vérifie si la version existe sur npm
          if npm view "@kared/kui@$PACKAGE_VERSION" --registry=https://registry.npmjs.org/ &>/dev/null; then
            echo "PUBLISHED_NPM=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION exists on NPM"
          else
            echo "PUBLISHED_NPM=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION not found on NPM"
          fi

          # Vérifie si la version existe sur GitHub Packages
          if npm view "@kared-games/kui@$PACKAGE_VERSION" --registry=https://npm.pkg.github.com/ &>/dev/null; then
            echo "PUBLISHED_GITHUB=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION exists on GitHub Packages"
          else
            echo "PUBLISHED_GITHUB=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION not found on GitHub Packages"
          fi

          # Vérifie si le tag existe
          if git ls-remote --tags origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "Version $PACKAGE_VERSION tag exists"
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          else
            echo "New version $PACKAGE_VERSION detected"
            echo "VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          fi

      # 5. Build et publication du package
      - name: 🏗️ Build package
        if: |
          steps.check_version.outputs.VERSION_CHANGED == 'true' ||
          steps.check_version.outputs.PUBLISHED_NPM == 'false' ||
          steps.check_version.outputs.PUBLISHED_GITHUB == 'false'
        run: npm run build

      - name: 🏷️ Create and push tag
        if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.check_version.outputs.TAG_NAME }}
          git push origin ${{ steps.check_version.outputs.TAG_NAME }}
          echo "Tag ${{ steps.check_version.outputs.TAG_NAME }} created and pushed."

      # 6. Création de la release GitHub
      - name: 📝 Create GitHub Release
        if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_version.outputs.TAG_NAME }}
          name: ${{ steps.check_version.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js for GitHub Packages
        if: steps.check_version.outputs.PUBLISHED_GITHUB == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://npm.pkg.github.com"
          scope: "@kared-games"

      - name: 📤 Publish to GitHub Packages
        if: steps.check_version.outputs.PUBLISHED_GITHUB == 'false'
        run: |
          echo "@kared-games:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. Création de la release NPM
      - name: 🔧 Setup Node.js for NPM
        if: steps.check_version.outputs.PUBLISHED_NPM == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@kared"

      - name: 📤 Publish to NPM
        if: steps.check_version.outputs.PUBLISHED_NPM == 'false'
        run: |
          # Sauvegarde du package.json original
          cp package.json package.json.bak

          # Modification du nom pour npm
          jq '.name = "@kared/kui"' package.json > temp.json && mv temp.json package.json

          # Publication sur npm
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          npm publish dist/ --access public

          # Restauration du package.json original
          mv package.json.bak package.json
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  # Appel au workflow de déploiement Storybook
  deploy-storybook:
    needs: build-and-publish
    if: needs.build-and-publish.outputs.VERSION_CHANGED == 'true'
    uses: ./.github/workflows/deploy-storybook.yml
    with:
      version_changed: ${{ needs.build-and-publish.outputs.VERSION_CHANGED }}
    secrets: inherit

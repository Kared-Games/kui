name: üöÄ Build and Publish

on:
  # D√©clenchement manuel depuis l'interface GitHub
  workflow_dispatch:

  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      pages: write

    outputs:
      VERSION_CHANGED: ${{ steps.check_version.outputs.VERSION_CHANGED }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Generate test coverage
        run: npm run test:coverage

      - name: üõÇ Ensure badges directory exists
        run: mkdir -p badges

      - name: üé® Create Coverage Badge
        uses: jaywcjlove/coverage-badges-cli@main
        with:
          source: coverage/coverage-summary.json
          output: badges/coverage.svg

      - name: üîç Check if version changed
        id: check_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_NAME="v$PACKAGE_VERSION"

          # V√©rifier si le tag existe d√©j√†
          if git ls-remote --tags origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "Version $PACKAGE_VERSION already published. Skipping."
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          else
            echo "New version $PACKAGE_VERSION detected."
            echo "VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          fi

      - name: üìÑ Deploy coverage report to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: coverage/lcov-report
          target-folder: coverage
          branch: gh-pages
          clean: true
          clean-exclude: |
            storybook/**
            badges/**

      - name: üè∑Ô∏è Deploy badge to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: badges
          target-folder: badges
          branch: gh-pages
          clean: false

      - name: üèóÔ∏è Build package
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        run: npm run build

      - name: üè∑Ô∏è Create and push tag
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # V√©rifier si le tag existe d√©j√†
          if ! git ls-remote --tags origin refs/tags/${{ steps.check_version.outputs.TAG_NAME }} | grep -q ${{ steps.check_version.outputs.TAG_NAME }}; then
            git tag ${{ steps.check_version.outputs.TAG_NAME }}
            git push origin ${{ steps.check_version.outputs.TAG_NAME }}
          else
            echo "Tag ${{ steps.check_version.outputs.TAG_NAME }} already exists. Skipping."
          fi

      - name: üîß Setup Node.js for GitHub Packages
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://npm.pkg.github.com"
          scope: "@kared-games"

      - name: üì§ Publish to GitHub Packages
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        run: |
          echo "@kared-games:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          cat .npmrc
          npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Node.js for NPM
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@kared"

      - name: üì§ Publish to NPM
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        run: |
          # Sauvegarde du package.json original
          cp package.json package.json.bak

          # Modification du nom pour npm
          jq '.name = "@kared/kui"' package.json > temp.json && mv temp.json package.json

          # Publication sur npm
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          npm publish --access public

          # Restauration du package.json original
          mv package.json.bak package.json
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: üìù Create GitHub Release
        # if: steps.check_version.outputs.VERSION_CHANGED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_version.outputs.TAG_NAME }}
          name: ${{ steps.check_version.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Appel au workflow de d√©ploiement Storybook
  deploy-storybook:
    needs: build-and-publish
    # if: needs.build-and-publish.outputs.VERSION_CHANGED == 'true'
    uses: ./.github/workflows/deploy-storybook.yml
    with:
      version_changed: "${{ needs.build-and-publish.outputs.VERSION_CHANGED }}"
    secrets: inherit
